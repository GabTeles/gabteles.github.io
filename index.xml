<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gabriel Teles</title>
    <link>http://gabrielteles.com.br/</link>
    <description>Recent content on Gabriel Teles</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 08 Jun 2016 01:20:19 -0300</lastBuildDate>
    <atom:link href="http://gabrielteles.com.br/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How floats can screw your code</title>
      <link>http://gabrielteles.com.br/blog/how-floats-can-screw-your-code/</link>
      <pubDate>Wed, 08 Jun 2016 01:20:19 -0300</pubDate>
      
      <guid>http://gabrielteles.com.br/blog/how-floats-can-screw-your-code/</guid>
      <description>

&lt;p&gt;At &lt;a href=&#34;https://www.pdvend.com.br/&#34;&gt;PDVend&lt;/a&gt; I handle monetary operations everytime and everywhere at our codebase, from our Ruby on Rails API to our client apps. Since money isn&amp;rsquo;t just integer at all, we have a lot of trouble with this. I&amp;rsquo;ll show you some implications of using floats (or doubles) in your code, some situations that you actually can use it and alternatives to.&lt;/p&gt;

&lt;h4 id=&#34;floats-are-evil:dd275889c84c5fa9cf6dac833d96526d&#34;&gt;Floats are evil&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s start trying out Ruby:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;a + b = &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You probably expect this to output something like &lt;code&gt;a + b = 0.3&lt;/code&gt;. Try to run and you&amp;rsquo;ll see that it&amp;rsquo;s &lt;code&gt;a + b = 0.30000000000000004&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What just happened here? To answer this, we must remember that floats are binary representations of decimal numbers. Not always binary can represent them or it&amp;rsquo;s operations with exact accuracy. Memory is limited, you cannot handle them&lt;/p&gt;

&lt;p&gt;But what about real world examples?&lt;/p&gt;

&lt;p&gt;In 1991, an missile was launched in Saudi Arabia against an american detachment. Another missile called Patriot was going to intercept it. Since Patriot missile battery was on for about 100 hours, it let the timestamps, which where stored as floats, to slowly introduce some diferences from the real timestamp to the computed timestamp.&lt;/p&gt;

&lt;p&gt;If you remember your physics classes, you can imagine that in order to intercept, Patriot would have to calculate the other missile speed and distance and adjust it direction to the other missile. Speed is measured in distance by time and, since  interceptor missile has some mismatches in time, I think it&amp;rsquo;s not going to work.&lt;/p&gt;

&lt;p&gt;Back to our case, Patriot had about a &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; second of difference in it&amp;rsquo;s timestamp. It means aproximately 600 meters due to it&amp;rsquo;s speed. Float killed 23 soldiers that day.&lt;/p&gt;

&lt;p&gt;You can read about the case in the U.S. Government Accountability Office &lt;a href=&#34;http://www.gao.gov/products/IMTEC-92-26&#34;&gt;Report&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;not-that-evil-when-to-use-how-to-use:dd275889c84c5fa9cf6dac833d96526d&#34;&gt;Not &lt;em&gt;that&lt;/em&gt; evil&amp;hellip; When to use? How to use?&lt;/h4&gt;

&lt;p&gt;Float inaccuracy can be an serious problem in some cases. Is it in all cases?&lt;/p&gt;

&lt;p&gt;Most of programmers only discover about float problems in the day which them have some trouble with it. It happens because, for most cases, some little imprecisions are tolerated. In some cases floats are transformed to integers.&lt;/p&gt;

&lt;p&gt;This datatype can be used when you can handle small imprecisions, like when there&amp;rsquo;s no problem if your character&amp;rsquo;s HP bar is 0.000000282px to the right or 0.000000013231px emptier than it should be.&lt;/p&gt;

&lt;p&gt;When using this datatypes, keep attention to possible errors looking to this points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sums or subtractions (&amp;ldquo;Unsafe&amp;rdquo; operations, due to floating point math)&lt;/li&gt;
&lt;li&gt;Operations in iterations&lt;/li&gt;
&lt;li&gt;Code stability (wheter it tent do reduce or magnify errors if floats)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;alternatives-to-float:dd275889c84c5fa9cf6dac833d96526d&#34;&gt;Alternatives to Float&lt;/h4&gt;

&lt;p&gt;Most languages have workarounds to floats. Here goes some of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C#: &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/364x0z75.aspx?f=255&amp;amp;MSPPError=-2147217396&#34;&gt;decimal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java: &lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html&#34;&gt;java.math.BigDecimal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Javascript: &lt;a href=&#34;https://github.com/MikeMcl/bignumber.js&#34;&gt;bignumber.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PHP: &lt;a href=&#34;http://php.net/manual/en/ref.bc.php&#34;&gt;BC Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ruby: &lt;a href=&#34;http://ruby-doc.org/stdlib-2.1.2/libdoc/bigdecimal/rdoc/BigDecimal.html&#34;&gt;BigDecimal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another strategy is to simplify your usage of floats. At PDVend, one of the solutions that emerged when we had to resolve float problems with money was to treat all of it as cents, the smallest money unit available.&lt;/p&gt;

&lt;p&gt;Examine what makes senses to your business.&lt;/p&gt;

&lt;h4 id=&#34;conclusion:dd275889c84c5fa9cf6dac833d96526d&#34;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Float is evil, floats can kill, but you can give them a try. You should only keep an eye on your needs and restrictions. Think about what would happen if you have an 0.1 error or an 0.0000001 error; does it matter?&lt;/p&gt;

&lt;p&gt;Even when you don&amp;rsquo;t use floats, note that your code can implicit &amp;ldquo;create&amp;rdquo; then. PHP, for example, treat some strings as floats.&lt;/p&gt;

&lt;p&gt;You should observe your language nuances, your code stability and your needs for precision when working with floats.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code</title>
      <link>http://gabrielteles.com.br/code/</link>
      <pubDate>Sat, 14 May 2016 14:09:35 -0300</pubDate>
      
      <guid>http://gabrielteles.com.br/code/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;m always trying to learn or do something new, even when it&amp;rsquo;s useless. Take a look at some of my personal projects in which I&amp;rsquo;ve worked on:&lt;/p&gt;

&lt;h3 id=&#34;rbtscp-https-github-com-gabteles-rbtscp:cb7f612e17aad7eb26c06709ef92a867&#34;&gt;&lt;a href=&#34;https://github.com/gabteles/RbTSCP&#34;&gt;RbTSCP&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Ruby implementation of &lt;a href=&#34;http://www.tckerrigan.com/Chess/TSCP/&#34;&gt;Tom Kerrigan&amp;rsquo;s Simple Chess Program (TSCP)&lt;/a&gt;, for sure not the best implementation that it can have, since this implementation was made just to work and be improved later. It&amp;rsquo;s ELO is about 1370, it means that it can win from newbies and some average players.&lt;/p&gt;

&lt;h3 id=&#34;zombierb-https-github-com-gabteles-zombierb:cb7f612e17aad7eb26c06709ef92a867&#34;&gt;&lt;a href=&#34;https://github.com/gabteles/ZombieRB&#34;&gt;ZombieRB&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Implementation of the ZOMBIE-ORIENTED MACHINE BEING INTERFACE ENGINE (Zombie). You know, like Hex, but with evil beings! Written in Ruby to offset the evil a bit. Evil necromancers might want to &lt;a href=&#34;http://www.dangermouse.net/esoteric/zombie.html&#34;&gt;go here&lt;/a&gt; to read the specification.&lt;/p&gt;

&lt;h3 id=&#34;gulp-less2sass-https-github-com-gabteles-gulp-less2sass:cb7f612e17aad7eb26c06709ef92a867&#34;&gt;&lt;a href=&#34;https://github.com/gabteles/gulp-less2sass&#34;&gt;gulp-less2sass&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This was my first NPM package and Gulp plugin released, it was made to learn how to do both. It takes &lt;a href=&#34;http://lesscss.org/&#34;&gt;Less&lt;/a&gt; code and transpiles to &lt;a href=&#34;http://sass-lang.com/&#34;&gt;Sass&lt;/a&gt;. Will not work with all Less codes, but it was not the purpose.&lt;/p&gt;

&lt;h3 id=&#34;interest-guesser-poc-https-github-com-gabteles-interest-guesser-poc-and-interest-guesser-https-github-com-gabteles-interest-guesser:cb7f612e17aad7eb26c06709ef92a867&#34;&gt;&lt;a href=&#34;https://github.com/gabteles/interest-guesser-poc&#34;&gt;Interest Guesser POC&lt;/a&gt; and &lt;a href=&#34;https://github.com/gabteles/interest-guesser&#34;&gt;Interest Guesser&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Interest Guesser learn the user&amp;rsquo;s interests and then guesses about. It was made to learn some new things like Node.JS, Machine Learning, Natural Language Processing. The POC was a success, then I keep the idea and tried to learn some things more: &lt;a href=&#34;http://spring.io/&#34;&gt;Spring&lt;/a&gt;, &lt;a href=&#34;http://redis.io/&#34;&gt;Redis&lt;/a&gt;, &lt;a href=&#34;http://hadoop.apache.org/&#34;&gt;Hadoop&lt;/a&gt;, &lt;a href=&#34;http://cassandra.apache.org/&#34;&gt;Cassandra&lt;/a&gt;, &lt;a href=&#34;http://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt;, &lt;a href=&#34;http://yeoman.io/&#34;&gt;Yeoman&lt;/a&gt; and REST APIs. Unfortunately, I&amp;rsquo;ve not finished the Java version, but I&amp;rsquo;ve learned much of what was purposed.&lt;/p&gt;

&lt;h3 id=&#34;befunge-93-interpreter-https-github-com-gabteles-befungeinterpreter:cb7f612e17aad7eb26c06709ef92a867&#34;&gt;&lt;a href=&#34;https://github.com/gabteles/BefungeInterpreter&#34;&gt;Befunge-93 Interpreter&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This is a Ruby implementation of Befunge&amp;rsquo;s interpreter. It means that you can run befunge code inside your ruby application and get it&amp;rsquo;s output during runtime. &lt;em&gt;&amp;ldquo;Befunge is a two-dimensional fungeoidal (in fact, the original fungeoid) esoteric programming language invented in 1993 by Chris Pressey with the goal of being as difficult to compile as possible.&amp;rdquo;&lt;/em&gt; - &lt;a href=&#34;https://esolangs.org/wiki/Befunge&#34;&gt;Esolangs&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;rpg-maker-game-exe-in-ruby-https-gist-github-com-gabteles-10000006:cb7f612e17aad7eb26c06709ef92a867&#34;&gt;&lt;a href=&#34;https://gist.github.com/gabteles/10000006&#34;&gt;RPG Maker Game.exe in Ruby&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Ruby implementation of RPG Maker&amp;rsquo;s Game.exe. Implementations in C and C++ were kind confuse before it. Main objetive with this implementation was to show initialization cycle in a more readable way.&lt;/p&gt;

&lt;h3 id=&#34;ruby-brainf-k-https-gist-github-com-gabteles-5996335:cb7f612e17aad7eb26c06709ef92a867&#34;&gt;&lt;a href=&#34;https://gist.github.com/gabteles/5996335&#34;&gt;Ruby Brainf**k&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Brainf**k language implementation in Ruby.&lt;/p&gt;

&lt;h3 id=&#34;big-factorial-https-algorithmia-com-algorithms-gabteles-bigfactorial:cb7f612e17aad7eb26c06709ef92a867&#34;&gt;&lt;a href=&#34;https://algorithmia.com/algorithms/gabteles/BigFactorial&#34;&gt;Big Factorial&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Calculate large number&amp;rsquo;s factorial using Stirling&amp;rsquo;s Approximation. For a given number N, will return the significant digits and the exponent for scientific notation of N!.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://gabrielteles.com.br/about/</link>
      <pubDate>Wed, 11 May 2016 21:19:58 -0300</pubDate>
      
      <guid>http://gabrielteles.com.br/about/</guid>
      <description>&lt;p&gt;Hello!&lt;/p&gt;

&lt;p&gt;My name is Gabriel and I&amp;rsquo;m a fullstack developer based in Brasília, Brazil. Developing things always was my passion, from websites, games, embedded systems to implementation of useless stuff. I&amp;rsquo;m always looking for cool projects, if you have one, please &lt;a href=&#34;mailto:gab.teles@hotmail.com?subject=Hey, just saw your site!&#34;&gt;let me know&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I can help you in many ways, take a look at &lt;a href=&#34;http://gabrielteles.com.br/files/gabriel-teles-resume.pdf&#34;&gt;my resume&lt;/a&gt; to know more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://gabrielteles.com.br/blog/hello-world/</link>
      <pubDate>Wed, 11 May 2016 19:31:48 -0300</pubDate>
      
      <guid>http://gabrielteles.com.br/blog/hello-world/</guid>
      <description>&lt;p&gt;Hi! This is my new site. If you do not know who I am, please check the &lt;a href=&#34;http://gabrielteles.com.br/about&#34;&gt;about page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This time I focused in maintaining the simplicity, as you can see. The last website was a bit boring to me, since it was only expositive. Now I plan to bring some content instead.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also changed some technical details. Now I&amp;rsquo;m using &lt;a href=&#34;gohugo.io/&#34;&gt;Hugo&lt;/a&gt; with &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was mainly atracted to this options because Hugo let me edit the site super easily. Github Pages was also a good choice, since it&amp;rsquo;s free, &lt;em&gt;really quick&lt;/em&gt; quickstart and keep my site open sourced. It was quite surprising to me how Hugo fits good in Github Pages.&lt;/p&gt;

&lt;p&gt;The next step is to integrate some kind of continuous integration, to autobuild the site after commits on the &lt;a href=&#34;https://github.com/gabteles/gabteles.github.io-dev&#34;&gt;development&lt;/a&gt; repository. (Or it can build automatically every day, to publish the future posts)&lt;/p&gt;

&lt;p&gt;So, that&amp;rsquo;s all folks, keep watching to updates. (:&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>